{-# LANGUAGE FlexibleContexts #-}

module Main where

import Data.List
import Data.Set    (fromList)

subsets :: [a] -> [[a]]
subsets []  = [[]]
subsets (x:xs) = subsets xs ++ map (x:) (subsets xs)

combinations :: Int -> [a] -> [[a]]
combinations size set =
  [ x |  x <- cs size set, (length x) == size]
  where
    cs size xs = [1..size] >>= \n -> mapM (const xs) [1..n]

interleave :: [a] -> [a] -> [a]
interleave xs ys = concat (transpose [xs, ys])

-- compose a set of values with a order
compose :: [Char] -> t -> [[Char]]
compose p cs =
  fmap (interleave p) $ combinations ((length p)-1) "+-*/"

value :: [Char] -> Int -> Int
value s n =
  case s!!n of
    '1' -> 1
    '2' -> 2
    '3' -> 3
    _   -> error "non integer"

operator :: Integral a => [Char] -> Int -> a -> a -> a
operator c n =
    case c!!n of
    '+' -> (+)
    '-' -> (-)
    '*' -> (*)
    '/' -> (div)
    _   -> error "non operator"

-- | solves the formula as a sequence, where position order defines operation order
-- | , hence "2+2*3" == ((2+2)*3) = 12
solve :: [Char] -> Int
solve f =
  case (length f) of
    3 -> v1 `op1` v2
    5 -> v1 `op1` v2 `op2` v3
    7 -> v1 `op1` v2 `op2` v3 `op3` v4
    _ -> error "non formula"
  where
    v1  = value    f 0
    v2  = value    f 2
    v3  = value    f 4
    v4  = value    f 6
    op1 = operator f 1
    op2 = operator f 3
    op3 = operator f 5
    op4 = operator f 7

f = "1*2+3"

-- test = (v1 f) op1 (v2 f)
--   where
--     op1 = op1 f

-- solve = v1 op

set123  = "123"
set1234 = "1234"

main =
  do
    print $ permutations "123"
  --["123","213","321","231","312","132"]
    print $ combinations 2 "+-*/"
  --["++","+-","+*","+/","-+","--","-*","-/","*+","*-","**","*/","/+","/-","/*","//"]
    print $ fmap (interleave "123") $ combinations 2 "+-*/"
  --["1+2+3","1+2-3","1+2*3","1+2/3","1-2+3","1-2-3","1-2*3","1-2/3","1*2+3","1*2-3","1*2*3","1*2/3","1/2+3","1/2-3","1/2*3","1/2/3"]
    
-- for every permutation - every combination
-- how to combine an element from a list of permutations onto every combination?
    -- Î»> compose "123" $ combinations 2 "+-*/"
    -- ["1+2+3","1+2-3","1+2*3","1+2/3","1-2+3","1-2-3","1-2*3","1-2/3","1*2+3","1*2-3","1*2*3","1*2/3","1/2+3","1/2-3","1/2*3","1/2/3"]
    print $ compose "123" $ combinations 2 "+-*/"
  --["1+2+3","1+2-3","1+2*3","1+2/3","1-2+3","1-2-3","1-2*3","1-2/3","1*2+3","1*2-3","1*2*3","1*2/3","1/2+3","1/2-3","1/2*3","1/2/3"]
    print $ concat [ compose x $ combinations ((length set123) -1 ) "+-*/" | x <- permutations set123 ]
  --["1+2+3","1+2-3","1+2*3","1+2/3","1-2+3","1-2-3","1-2*3","1-2/3","1*2+3","1*2-3","1*2*3","1*2/3","1/2+3","1/2-3","1/2*3","1/2/3","2+1+3","2+1-3","2+1*3","2+1/3","2-1+3","2-1-3","2-1*3","2-1/3","2*1+3","2*1-3","2*1*3","2*1/3","2/1+3","2/1-3","2/1*3","2/1/3","3+2+1","3+2-1","3+2*1","3+2/1","3-2+1","3-2-1","3-2*1","3-2/1","3*2+1","3*2-1","3*2*1","3*2/1","3/2+1","3/2-1","3/2*1","3/2/1","2+3+1","2+3-1","2+3*1","2+3/1","2-3+1","2-3-1","2-3*1","2-3/1","2*3+1","2*3-1","2*3*1","2*3/1","2/3+1","2/3-1","2/3*1","2/3/1","3+1+2","3+1-2","3+1*2","3+1/2","3-1+2","3-1-2","3-1*2","3-1/2","3*1+2","3*1-2","3*1*2","3*1/2","3/1+2","3/1-2","3/1*2","3/1/2","1+3+2","1+3-2","1+3*2","1+3/2","1-3+2","1-3-2","1-3*2","1-3/2","1*3+2","1*3-2","1*3*2","1*3/2","1/3+2","1/3-2","1/3*2","1/3/2"]
    print $ [ x | x  <- ( fmap (`div` 2) $ filter ((0 == ).(`rem` 2)) [1..6])]
  --[1,2,3] -- filter a list of intefers devisible by 2, so that resulting list is also a list of integers
    print $ fmap solve $ concat [ compose x $ combinations ((length set123) -1 ) "+-*/" | x <- permutations set123 ]
  --[6,0,9,1,2,-4,-3,-1,5,-1,6,0,3,-3,0,0,6,0,9,1,4,-2,3,0,5,-1,6,0,5,-1,6,0,6,4,5,5,2,0,1,1,7
    print $ filter (/=0) $ fmap solve $ concat [ compose x $ combinations ((length set123) -1 ) "+-*/" | x <- permutations set123]
  --[6,0,9,1,2,-4,-3,-1,5,-1,6,0,3,-3,0,0,6,0,9,1,4,-2,3,0,5,-1,6,0....
